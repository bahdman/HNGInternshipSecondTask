### HNGInternshipSecondTask


# API Documentation

**Live URL**: https://bahdman.bsite.net/api

## Standard Formats for Requests and Responses

### 1. `POST /api/AddUser`

#### Request Format

- **Method**: POST
- **Endpoint**: `/api/AddUser`
- **Request Body**:
  ```json
  {
    "Name": "John Doe"
  }
  ```

#### Response Format

- **Status Codes**:
  - `201 Created`: User successfully created.
  - `400 Bad Request`: Invalid input data or validation failure.
  - `500 Internal Server Error`: Database issue.

- **Response Body (on success)**:
  ```json
  {
    "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
    "Name": "John Doe"
  }
  ```

### 2. `GET /api/GetUser/{id}`

#### Request Format

- **Method**: GET
- **Endpoint**: `/api/GetUser/{id}`

#### Response Format

- **Status Codes**:
  - `200 OK`: User found.
  - `400 Bad Request`: Invalid `id`.
  - `404 Not Found`: User not found.

- **Response Body (on success)**:
  ```json
  {
    "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
    "Name": "John Doe"
  }
  ```

### 3. `PUT /api/EditUser/{id}`

#### Request Format

- **Method**: PUT
- **Endpoint**: `/api/EditUser/{id}`
- **Request Body**:
  ```json
  {
    "Name": "Updated Name"
  }
  ```

#### Response Format

- **Status Codes**:
  - `200 OK`: User updated successfully.
  - `400 Bad Request`: Invalid `id` or invalid input data.
  - `404 Not Found`: User not found.

- **Response Body (on success)**:
  ```json
  {
    "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
    "Name": "Updated Name"
  }
  ```

### 4. `DELETE /api/DeleteUser/{id}`

#### Request Format

- **Method**: DELETE
- **Endpoint**: `/api/DeleteUser/{id}`

#### Response Format

- **Status Codes**:
  - `200 OK`: User deleted successfully.
  - `400 Bad Request`: Invalid `id`.
  - `404 Not Found`: User not found.

- **Response Body (on success)**:
  ```json
  "User was successfully deleted :)"
  ```

## Sample API Usage

### Example 1: Creating a User

**Request**:
```http
POST /api/AddUser
Content-Type: application/json

{
  "Name": "John Doe"
}
```

**Response**:
```json
HTTP/1.1 201 Created

{
  "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
  "Name": "John Doe"
}
```

### Example 2: Retrieving a User

**Request**:
```http
GET /api/GetUser/d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6
```

**Response**:
```json
HTTP/1.1 200 OK

{
  "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
  "Name": "John Doe"
}
```

### Example 3: Updating a User

**Request**:
```http
PUT /api/EditUser/d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6
Content-Type: application/json

{
  "Name": "Updated Name"
}
```

**Response**:
```json
HTTP/1.1 200 OK

{
  "Id": "d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6",
  "Name": "Updated Name"
}
```

### Example 4: Deleting a User

**Request**:
```http
DELETE /api/DeleteUser/d8f0013f-2aa9-4a1a-8d49-8559d3f8d2a6
```

**Response**:
```json
HTTP/1.1 200 OK

"User was successfully deleted :)"
```

## Known Limitations and Assumptions

- The API assumes that the `Name` provided in requests should consist only of alphabets, hyphens, and spaces.


### Setting up this api locally.

**Prerequisites**:

1. Install [.NET Core SDK](https://dotnet.microsoft.com/download).
2. Use a code editor like Visual Studio Code (VS Code).

**Steps**:

1. Clone this API project repository to your computer.

2. Open a terminal/command prompt and navigate to your project's folder.

3. Run he command `dotnet restore` to install project dependencies.

4. Run the command `dotnet build` to build the API.

5. Start the API with the command `dotnet run`. It will run on `localhost:5001` or `localhost:5000`.

6. Test your API using a web browser or tools like Postman with the base URL (e.g., `http://localhost:5001/api`).

